// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
const line = require('@line/bot-sdk');
const express = require('express');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ LINE Bot
const config = {
  channelAccessToken: 'UKcDMbQt8jAwg7zji13tVf50BPdwOsQYhtyK1D+kACdxYJt1XKY0kvhYdiOK8GE4fgHsrakIGT9Q4UCphSpIhNJwMBeDKaWMzU06YUwhHUqiD7qE5H3GSVvKvpFygwA7DXP8MroQPNW+onG+UYXQ1AdB04t89/1O/w1cDnyilFU=',
  channelSecret: '6884027b48dc05ad5deadf87245928da'
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Bot
const client = new line.Client(config);

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ Express
const app = express();

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ body parser ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö raw body
const bodyParser = express.json({
  verify: (req, res, buf) => {
    req.rawBody = buf;
  }
});

app.use(bodyParser);

// ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const userSessions = {};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏ô‡∏î‡∏≠‡∏° UUID
function generateUUID() {
  return uuidv4();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤ expiryTime (3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
function generateExpiryTime() {
  const now = new Date();
  const expiryDate = new Date(now.getTime() + 3 * 60 * 60 * 1000); // 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  return expiryDate.getTime();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö (‡πÉ‡∏ä‡πâ VPS xvre ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
function login(callback) {
  const loginOptions = {
    method: 'POST',
    url: 'http://botvipicopc.vipv2boxth.xyz:2053/0UnAOmjQ1vIaSIr/login',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    data: new URLSearchParams({
      'username': '6FocoC0F7a',
      'password': 'hmSwvyVmAo'
    })
  };

  axios(loginOptions)
    .then(response => {
      const body = response.data;
      if (body.success) {
        console.log('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', body.msg);
        callback(null);
      } else {
        console.log('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', body.msg);
        callback(new Error(body.msg));
      }
    })
    .catch(error => {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:', error);
      callback(error);
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ VPS xvre ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
function addNewClient(session, successCallback, errorCallback) {
  const clientUUID = generateUUID();
  const expiryTime = generateExpiryTime();

  const apiUrl = 'http://botvipicopc.vipv2boxth.xyz:2053/0UnAOmjQ1vIaSIr/panel/api/inbounds/addClient';
  const apiSettings = {
    clients: [{
      id: clientUUID,
      alterId: 0,
      email: session.codeName,
      limitIp: 2,
      totalGB: 0, // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î GB
      expiryTime: expiryTime,
      enable: true,
      tgId: '',
      subId: ''
    }]
  };

  const options = {
    method: 'POST',
    url: apiUrl,
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
    data: {
      id: 4,
      settings: JSON.stringify(apiSettings)
    }
  };

  axios(options)
    .then(response => {
      const body = response.data;
      if (body.success) {
        console.log('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', body.msg);
        let clientCode = `vless://${clientUUID}@botvipicopc.vipv2boxth.xyz:2052?type=ws&path=%2F&host=botvipicopc.vipv2boxth.xyz&security=none#${encodeURIComponent(session.codeName)}`;
        successCallback(clientCode, expiryTime);
      } else {
        console.log('‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', body.msg);
        errorCallback(body.msg);
      }
    })
    .catch(error => {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠:', error);
      errorCallback('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠');
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ä‡∏ó‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
function sendCodeToChat(replyToken, chatId, clientCode, session, expiryTime) {
  const message = {
    type: 'text',
    text: `‚úÖ *‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!*\n\nüì¨ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:\n\n\`${clientCode}\`\n\n‚è∞ ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 3 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`
  };

  client.replyMessage(replyToken, message)
    .then(() => {
      console.log('‡∏™‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
      delete userSessions[chatId];
    })
    .catch((error) => {
      if (error.statusCode === 403) {
        const replyMessage = {
          type: 'text',
          text: `üîó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ö‡∏≠‡∏ó‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î\n\nüìå ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó: https://line.me/R/ti/p/YOUR_LINE_ID`
        };
        client.pushMessage(chatId, replyMessage)
          .catch((err) => {
            console.error('Error notifying user to start chat:', err);
          });
      } else {
        console.error('Error sending code to user:', error);
      }
    });
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.post('/webhook', (req, res) => {
  const signature = req.get('x-line-signature');
  
  if (!signature) {
    return res.status(400).send('Missing x-line-signature');
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á signature
    if (!line.validateSignature(req.rawBody, config.channelSecret, signature)) {
      return res.status(400).send('Invalid signature');
    }

    Promise.all(req.body.events.map(handleEvent))
      .then((result) => res.json(result))
      .catch((err) => {
        console.error('Error handling webhook:', err);
        res.status(500).end();
      });
  } catch (err) {
    console.error('Error validating signature:', err);
    res.status(500).send('Internal server error');
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
function handleEvent(event) {
  if (event.type !== 'message' || event.message.type !== 'text') {
    return Promise.resolve(null);
  }

  const userId = event.source.userId;
  const chatId = event.source.groupId || userId;
  const text = event.message.text.trim().toLowerCase();

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (userSessions[chatId]) {
    const session = userSessions[chatId];

    if (session.step === 'ask_network') {
      const network = text;
      if (['‡∏ó‡∏£‡∏π‡πÇ‡∏ô‡πÇ‡∏õ‡∏£', '‡∏ó‡∏£‡∏π‡πÇ‡∏õ‡∏£‡πÄ‡∏ü‡∏™', 'ais'].includes(network)) {
        session.network = network;
        session.step = 'ask_code_name';
        const reply = {
          type: 'text',
          text: 'üìõ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
        };
        return client.replyMessage(event.replyToken, reply);
      } else {
        const reply = {
          type: 'text',
          text: '‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏ó‡∏£‡∏π‡πÇ‡∏ô‡πÇ‡∏õ‡∏£, ‡∏ó‡∏£‡∏π‡πÇ‡∏õ‡∏£‡πÄ‡∏ü‡∏™, AIS'
        };
        return client.replyMessage(event.replyToken, reply);
      }
    } else if (session.step === 'ask_code_name') {
      const codeName = text;
      session.codeName = codeName;
      session.step = 'creating_code';
      const reply = {
        type: 'text',
        text: '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...'
      };
      client.replyMessage(event.replyToken, reply);

      login((loginError) => {
        if (loginError) {
          const errorReply = {
            type: 'text',
            text: 'üö´ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          };
          client.pushMessage(chatId, errorReply);
          delete userSessions[chatId];
          return;
        }

        addNewClient(session, (clientCode, expiryTime) => {
          sendCodeToChat(event.replyToken, chatId, clientCode, session, expiryTime);

          const successReply = {
            type: 'text',
            text: '‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö.'
          };
          client.pushMessage(chatId, successReply);
        }, (errorMsg) => {
          const errorReply = {
            type: 'text',
            text: `üö´ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î: ${errorMsg}`
          };
          client.pushMessage(chatId, errorReply);
          delete userSessions[chatId];
        });
      });

      return Promise.resolve(null);
    }
  } else if (text.includes('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢')) {
    userSessions[chatId] = { step: 'ask_network' };
    const reply = {
      type: 'text',
      text: 'üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î:\n\n1. ‡∏ó‡∏£‡∏π‡πÇ‡∏ô‡πÇ‡∏õ‡∏£\n2. ‡∏ó‡∏£‡∏π‡πÇ‡∏õ‡∏£‡πÄ‡∏ü‡∏™\n3. AIS'
    };
    return client.replyMessage(event.replyToken, reply);
  } else {
    const reply = {
      type: 'text',
      text: '‚ùì ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î'
    };
    return client.replyMessage(event.replyToken, reply);
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const port = process.env.PORT || 10000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
