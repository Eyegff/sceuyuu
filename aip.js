// app.js
const express = require('express');
const axios = require('axios');
const qs = require('querystring');
const crypto = require('crypto');
const { URL } = require('url');
const fs = require('fs');
const path = require('path');
const sharp = require('sharp');
const QRCode = require('qrcode');
const schedule = require('node-schedule');
const line = require('@line/bot-sdk');

const app = express();

// LINE Bot's Channel Access Token and Channel Secret
const LINE_CHANNEL_ACCESS_TOKEN = 'UKcDMbQt8jAwg7zji13tVf50BPdwOsQYhtyK1D+kACdxYJt1XKY0kvhYdiOK8GE4fgHsrakIGT9Q4UCphSpIhNJwMBeDKaWMzU06YUwhHUqiD7qE5H3GSVvKvpFygwA7DXP8MroQPNW+onG+UYXQ1AdB04t89/1O/w1cDnyilFU='; // ‡πÉ‡∏™‡πà Channel Access Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
const LINE_CHANNEL_SECRET = '6884027b48dc05ad5deadf87245928da'; // ‡πÉ‡∏™‡πà Channel Secret ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
const SERVER_URL = 'https://yourapp.onrender.com'; // ‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

// LINE SDK config
const config = {
  channelAccessToken: LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: LINE_CHANNEL_SECRET,
};

const client = new line.Client(config);

// ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á ‡πÜ
const thaiPrefixes = [
  '‡πÄ‡∏ó‡∏û', '‡∏û‡∏ç‡∏≤', '‡∏£‡∏≤‡∏ä‡∏≤', '‡∏à‡∏≠‡∏°', '‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô', '‡∏õ‡∏£‡∏≤‡∏ä‡∏ç‡πå', '‡∏°‡∏≤‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå', '‡∏≠‡∏±‡∏•‡∏ï‡∏£‡πâ‡∏≤', '‡πÄ‡∏°‡∏Å‡πâ‡∏≤',
  '‡∏à‡∏±‡∏Å‡∏£', '‡∏°‡∏´‡∏≤', '‡∏¢‡∏≠‡∏î', '‡πÄ‡∏à‡πâ‡∏≤', '‡∏ó‡∏¥‡∏û‡∏¢‡πå', '‡∏ó‡∏¥‡∏ß', '‡∏û‡∏£‡∏∞', '‡∏°‡∏∑‡∏≠', '‡∏™‡∏∏‡∏î', '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠', '‡∏™‡∏≤‡∏¢‡∏•‡∏°', '‡∏≠‡∏±‡∏®‡∏ß‡∏¥‡∏ô',
  '‡∏î‡∏¥‡∏à‡∏¥', '‡πÑ‡∏ã‡πÄ‡∏ö‡∏≠‡∏£‡πå', '‡πÑ‡∏ß‡∏£‡∏±‡∏™', '‡∏Ñ‡∏≠‡∏™‡∏°‡∏¥‡∏Å', '‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÇ‡∏ö', '‡∏ô‡∏¥‡∏ß‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå', '‡πÅ‡∏£‡πá‡∏û‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡πÇ‡∏Ñ‡∏£‡πÇ‡∏ô‡∏™'
];

const thaiMainWords = [
  '‡∏™‡∏≤‡∏¢‡∏ü‡πâ‡∏≤', '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡πÄ‡∏°‡∏Ü', '‡∏û‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏û', '‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏•', '‡∏°‡∏±‡∏á‡∏Å‡∏£', '‡πÄ‡∏Å‡∏£‡∏≤‡∏∞‡πÄ‡∏û‡∏ä‡∏£', '‡∏™‡∏≤‡∏¢‡∏•‡∏±‡∏ö', '‡∏û‡∏•‡∏±‡∏á‡∏à‡∏¥‡∏ï',
  '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏ü‡πâ‡∏≤', '‡∏ó‡∏∞‡∏¢‡∏≤‡∏ô‡∏î‡∏≤‡∏ß', '‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÄ‡∏´‡∏•‡πá‡∏Å', '‡∏û‡∏≤‡∏¢‡∏∏‡∏î‡∏≤‡∏ß', '‡πÄ‡∏Å‡∏£‡∏≤‡∏∞‡∏ó‡∏≠‡∏á', '‡∏™‡∏≤‡∏¢‡∏ô‡∏±‡∏Å‡∏£‡∏ö', '‡πÄ‡∏ó‡∏û‡πÄ‡∏ß‡∏´‡∏≤',
  '‡∏£‡∏≤‡∏ä‡∏≤‡πÄ‡∏ô‡πá‡∏ï', '‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏™‡∏á', '‡∏û‡∏•‡∏±‡∏á‡πÄ‡∏ô‡πá‡∏ï', '‡∏™‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô', '‡πÄ‡∏ô‡πá‡∏ï‡∏ó‡∏∞‡∏•‡∏∏', '‡πÑ‡∏£‡πâ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ó‡∏∞‡∏•‡∏∏‡∏°‡∏¥‡∏ï‡∏¥',
  '‡∏î‡∏≤‡∏ö‡∏®‡∏±‡∏Å‡∏î‡∏¥‡πå‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå', '‡∏ü‡∏µ‡∏ô‡∏¥‡∏Å‡∏ã‡πå', '‡∏î‡∏≤‡∏ß‡∏ï‡∏Å', '‡∏ô‡∏¥‡∏ô‡∏à‡∏≤', '‡∏™‡∏õ‡∏≤‡∏¢', '‡∏≠‡∏¥‡∏ô‡∏ü‡∏¥‡∏ô‡∏¥‡∏ï‡∏µ‡πâ', '‡∏™‡∏ï‡∏£‡∏≠‡∏°', '‡∏ã‡∏¥‡∏Å‡∏°‡πà‡∏≤'
];

const thaiSuffixes = [
  '‡∏ó‡∏∞‡∏•‡∏∏‡∏°‡∏¥‡∏ï‡∏¥', '‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÅ‡∏Å‡∏£‡πà‡∏á', '‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏ä‡∏±‡πâ‡∏ô', '‡πÑ‡∏£‡πâ‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î', '‡∏ó‡∏∞‡∏•‡∏∏‡∏ü‡πâ‡∏≤', '‡∏û‡∏¥‡∏ä‡∏¥‡∏ï‡πÉ‡∏à', '‡πÑ‡∏£‡πâ‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏ó‡∏≤‡∏ô',
  '‡πÄ‡∏Å‡∏¥‡∏ô‡∏ï‡πâ‡∏≤‡∏ô', '‡πÑ‡∏£‡πâ‡∏û‡πà‡∏≤‡∏¢', '‡∏ä‡∏≤‡∏ç‡πÄ‡∏ô‡πá‡∏ï', '‡πÅ‡∏´‡πà‡∏á‡∏¢‡∏∏‡∏Ñ', '‡∏™‡∏õ‡∏µ‡∏î', '‡∏™‡∏õ‡∏µ‡∏î‡∏™‡∏ï‡∏≤‡∏£‡πå', '‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏™‡∏õ‡∏µ‡∏î', '‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÇ‡∏ö',
  '‡πÄ‡∏°‡∏Å‡πâ‡∏≤‡∏ö‡∏π‡∏™‡∏ï‡πå', '‡∏≠‡∏±‡∏•‡∏ï‡∏¥‡πÄ‡∏°‡∏ó', '‡∏™‡∏õ‡∏µ‡∏î‡πÅ‡∏°‡πá‡∏Å‡∏ã‡πå', '‡πÅ‡∏£‡∏á‡∏ó‡∏∞‡∏•‡∏∏‡∏ü‡πâ‡∏≤', '‡πÄ‡∏ï‡πá‡∏°‡∏™‡∏õ‡∏µ‡∏î', '‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï'
];

const englishPrefixes = [
  'CYBER', 'QUANTUM', 'HYPER', 'ULTRA', 'MEGA', 'SUPER', 'THUNDER', 'LIGHTNING',
  'PLASMA', 'NOVA', 'NEXUS', 'ELITE', 'PRIME', 'OMEGA', 'ALPHA', 'DELTA',
  'GIGA', 'TURBO', 'INFINITE', 'VELOCITY', 'BLAZE', 'FLASH', 'CRYPTO', 'PHOENIX'
];

const englishMainWords = [
  'SPEED', 'SURGE', 'FLUX', 'FORCE', 'PULSE', 'WAVE', 'STREAM', 'BEAM',
  'CORE', 'BLADE', 'EDGE', 'RUSH', 'BURST', 'BLAST', 'SPARK', 'VOLT',
  'BOOST', 'DRIVE', 'ZONE', 'LINK', 'NET', 'VORTEX', 'CYCLONE', 'STORM'
];

const englishSuffixes = [
  'PRO', 'MAX', 'PLUS', 'ELITE', 'PREMIUM', 'EXTREME', 'ULTIMATE', 'MASTER',
  'X', 'ZERO', 'ALPHA', 'OMEGA', 'PRIME', 'CORE', 'NEXT', 'NOVA',
  'BOOST', 'VELOCITY', 'EDGE', 'FUSION', 'INFINITY', 'TURBO', 'EXPERT'
];

const techTerms = [
  '5G', '64K', 'X1', 'V2', 'X2', 'GT', 'XS', 'XT',
  'RTX', 'GTX', 'PRO', 'MAX', 'PLUS', 'ULTRA', 'XR', 'RS',
  'VPN', 'NET', 'LINK', 'DATA', 'STREAM', 'ONLINE', 'WEB', 'DIGI'
];

// ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡πÇ‡∏Å‡πâ
const backgroundUrls = [
  "https://images.unsplash.com/photo-1478760329108-5c3ed9d495a0?w=800",
  "https://images.unsplash.com/photo-1480714378408-67cf0d13bc1b?w=800",
  "https://images.unsplash.com/photo-1493246507139-91e8fad9978e?w=800"
];

const logoUrl = 'https://raw.githubusercontent.com/github/explore/main/topics/python/python.png';

let generatedNames = new Set();
let trueV2Count = 0;
let sequence = ['TRUE_PRO_FACEBOOK'];
let sequenceIndex = 0;
let userIds = new Set();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡πâ‡∏î VLESS
async function fetchVlessCodes() {
  const urls = [
    'https://raw.githubusercontent.com/barry-far/V2ray-Configs/main/Sub1.txt',
    'https://raw.githubusercontent.com/barry-far/V2ray-Configs/main/Sub2.txt',
    'https://raw.githubusercontent.com/barry-far/V2ray-Configs/main/Sub3.txt',
    'https://raw.githubusercontent.com/barry-far/V2ray-Configs/main/Sub4.txt',
    'https://raw.githubusercontent.com/barry-far/V2ray-Configs/main/Sub5.txt'
  ];
  let allCodes = [];
  for (const url of urls) {
    try {
      const response = await axios.get(url);
      const vlessPattern = /vless:\/\/[^#\s]+/g;
      const codes = response.data.match(vlessPattern) || [];
      allCodes = allCodes.concat(codes);
      console.log(`‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î VLESS ‡∏à‡∏≤‡∏Å ${url} ‡πÑ‡∏î‡πâ ${codes.length} ‡πÇ‡∏Ñ‡πâ‡∏î`);
    } catch (error) {
      console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å ${url}: ${error}`);
    }
  }
  return allCodes;
}

function filterVlessCodesBySni(codes, targetSni = 'BpB-V.PagEs.dev') {
  const filteredCodes = [];
  for (const code of codes) {
    try {
      const parsedUrl = new URL(code);
      if (parsedUrl.protocol !== 'vless:') continue;

      const queryParams = qs.parse(parsedUrl.search.substring(1));
      const sniParams = ['sni', 'serverName', 'host'];
      let foundSni = false;

      for (const param of sniParams) {
        if (queryParams[param]) {
          const sniValue = queryParams[param];
          if (sniValue.toLowerCase() === targetSni.toLowerCase()) {
            filteredCodes.push(code);
            foundSni = true;
            break;
          }
        }
      }

      if (!foundSni) {
        const host = parsedUrl.hostname;
        if (host.toLowerCase() === targetSni.toLowerCase()) {
          filteredCodes.push(code);
        }
      }
    } catch (error) {
      console.error(`‡∏Ç‡πâ‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error}`);
    }
  }
  return filteredCodes;
}

function generateRandomCodeName(provider) {
  let attempt = 0;
  const maxAttempts = 1000;

  while (attempt < maxAttempts) {
    attempt++;

    const useThai = Math.random() < 0.5;
    let nameBody;

    if (useThai) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      const prefix = randomChoice(thaiPrefixes);
      const mainWord = randomChoice(thaiMainWords);
      const suffix = randomChoice(thaiSuffixes);
      const useSuffix = Math.random() < 0.7;
      nameBody = useSuffix ? `${prefix}${mainWord}${suffix}` : `${prefix}${mainWord}`;
    } else {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
      const prefix = randomChoice(englishPrefixes);
      const mainWord = randomChoice(englishMainWords);
      const suffix = randomChoice(englishSuffixes);
      const techTerm = randomChoice(techTerms);

      const namePattern = Math.floor(Math.random() * 5) + 1;
      switch (namePattern) {
        case 1:
          nameBody = `${prefix}-${mainWord}-${suffix}`;
          break;
        case 2:
          nameBody = `${prefix}${techTerm}-${mainWord}${suffix}`;
          break;
        case 3:
          nameBody = `${prefix}-${mainWord}-${techTerm}`;
          break;
        case 4:
          nameBody = `${prefix}-${mainWord}-${techTerm}-${suffix}`;
          break;
        default:
          nameBody = `${prefix}${mainWord}-${suffix}${techTerm}`;
          break;
      }
    }

    const networkPrefix = provider.toUpperCase() === 'TRUE'
      ? randomChoice(['TRUE', 'TRUEMOVE', 'TRUEONLINE'])
      : randomChoice(['AIS', 'AISONLINE', 'AISFIBRE']);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    const emojis = [
      'üöÄ', '‚ö°', 'üåü', 'üí´', '‚ú®', 'üî•', 'üí•', 'üåà', 'üéØ', 'üéÆ',
      'üõ°Ô∏è', 'üåê', 'üî∞', 'üåÄ', '‚öîÔ∏è', 'üéÜ', 'üéá', 'üöß', 'üì°', 'üì∂',
      'üîå', 'üíª', 'üì≤', 'üõ∞Ô∏è', 'üîÆ', 'üïπÔ∏è', '‚öôÔ∏è', 'üí†', 'üßø', 'üó≤'
    ];
    const emoji = randomChoice(emojis);

    let codeName = `${emoji} ${networkPrefix} ${nameBody}`;

    if (Math.random() < 0.5) {
      const separators = ['√ó', '‚Ä¢', '‚ö°', '‚òÜ', '‚òÖ', '‚û§', '‚ü´', '‚ùØ', '‚óâ', '‚óà', '‚û•', '‚òØ', '‚ú¶', '‚úß'];
      const separator = randomChoice(separators);
      codeName = codeName.replace(' ', ` ${separator} `);
    }

    if (!generatedNames.has(codeName)) {
      generatedNames.add(codeName);
      return codeName;
    }
  }
  throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ');
}

function randomChoice(array) {
  return array[Math.floor(Math.random() * array.length)];
}

async function saveImage(imageBuffer, filename) {
  const staticDir = path.join(__dirname, 'static');
  if (!fs.existsSync(staticDir)) {
    fs.mkdirSync(staticDir);
  }
  const filepath = path.join(staticDir, filename);
  fs.writeFileSync(filepath, imageBuffer);
  const imageUrl = `${SERVER_URL}/static/${encodeURIComponent(filename)}`;
  return imageUrl;
}

async function generateCodeAuto() {
  const currentStep = sequence[sequenceIndex % sequence.length];
  sequenceIndex++;

  try {
    console.log(`‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${currentStep}`);

    if (currentStep === 'TRUE_PRO_FACEBOOK') {
      const provider = 'TRUE';
      const allCodes = await fetchVlessCodes();
      const filteredCodes = filterVlessCodesBySni(allCodes, 'BpB-V.PagEs.dev');
      console.log(`‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allCodes.length} ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤`);
      console.log(`‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${filteredCodes.length} ‡πÇ‡∏Ñ‡πâ‡∏î`);

      if (filteredCodes.length === 0) {
        console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î TRUE V2 ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        return;
      }

      let codeTemplate = randomChoice(filteredCodes);
      const codeName = generateRandomCodeName(provider) + ' V2';
      trueV2Count++;

      const parsedUrl = new URL(codeTemplate);
      const originalHost = parsedUrl.hostname;

      // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á host ‡πÄ‡∏õ‡πá‡∏ô 's.true.th'
      parsedUrl.hostname = 's.true.th';
      parsedUrl.hash = encodeURIComponent(codeName);
      codeTemplate = parsedUrl.toString();

      const serverHost = originalHost;
      const providerText = 'TRUE V2 | ‡πÇ‡∏õ‡∏£‡πÄ‡∏ü‡∏™-‡πÄ‡∏Å‡∏°‡∏°‡∏¥‡πà‡∏á';
      const instructions = `‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô TRUE V2:
1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏û v2BOX
2. ‡∏ß‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡∏á‡πÑ‡∏õ

‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏ô‡πá‡∏ï‡∏ó‡∏£‡∏π:
- ‡∏Å‡∏î *935*99# ‡πÄ‡∏ü‡∏™100MB/‡∏ß‡∏±‡∏ô
- ‡∏´‡∏£‡∏∑‡∏≠ *935*59# ‡πÄ‡∏Å‡∏°‡∏°‡∏¥‡πà‡∏á100MB/‡∏ß‡∏±‡∏ô
- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£ *900*2894# 512KB
- ‡∏£‡∏≤‡∏Ñ‡∏≤ 22 ‡∏ö‡∏≤‡∏ó ‡∏ô‡∏≤‡∏ô 7 ‡∏ß‡∏±‡∏ô

- ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏ô‡πá‡∏ï`;

      console.log(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î TRUE V2: ${codeName}`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û
      const backgroundUrl = randomChoice(backgroundUrls);
      const backgroundResponse = await axios.get(backgroundUrl, { responseType: 'arraybuffer' });
      let background = await sharp(backgroundResponse.data)
        .resize(800, 1200)
        .toBuffer();

      const qrCodeBuffer = await QRCode.toBuffer(codeTemplate, {
        type: 'png',
        errorCorrectionLevel: 'H',
        width: 300,
        margin: 1,
        color: {
          dark: '#000000',
          light: '#FFFFFF',
        },
      });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ
      try {
        const logoResponse = await axios.get(logoUrl, { responseType: 'arraybuffer' });
        const logoBuffer = await sharp(logoResponse.data)
          .resize({ width: 60 })
          .toBuffer();

        // ‡∏£‡∏ß‡∏° QR Code ‡∏Å‡∏±‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ
        const qrWithLogo = await sharp(qrCodeBuffer)
          .composite([{ input: logoBuffer, gravity: 'center' }])
          .toBuffer();

        qrCodeBuffer = qrWithLogo;
        console.log('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏•‡∏á‡πÉ‡∏ô QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } catch (error) {
        console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏•‡∏á‡πÉ‡∏ô QR Code ‡πÑ‡∏î‡πâ: ${error}`);
      }

      // ‡∏ß‡∏≤‡∏á QR Code ‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
      const finalImage = await sharp(background)
        .composite([{ input: qrCodeBuffer, top: 450, left: 250 }])
        .toBuffer();

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á URL
      const imageFilename = `${codeName}.png`;
      const imageUrl = await saveImage(finalImage, imageFilename);

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const tz = 'Asia/Bangkok';
      const currentTime = new Date().toLocaleString('th-TH', { timeZone: tz });

      const messageText = `${codeName}
${codeTemplate}

üîπ ‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢: ${provider.toUpperCase()}
‚ö° ‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•: VLESS ‡∏ú‡πà‡∏≤‡∏ô WebSocket
üì° ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ${serverHost}
üîí ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ AES-256
üåê ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢: ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î

üìÖ ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${currentTime} üï∞

ü§ñ ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏î‡∏¢‡∏ö‡∏≠‡∏ó: XCELLENT O5. </>
üè∑Ô∏è ‡∏Å‡∏•‡∏∏‡πà‡∏°: CKOI VIP`;

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      for (const userId of userIds) {
        try {
          await client.pushMessage(userId, [
            {
              type: 'image',
              originalContentUrl: imageUrl,
              previewImageUrl: imageUrl,
            },
            {
              type: 'text',
              text: messageText,
            },
          ]);
          console.log(`‡∏™‡πà‡∏á‡πÇ‡∏Ñ‡πâ‡∏î ${codeName} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        } catch (error) {
          console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}: ${error}`);
        }
      }
    } else {
      console.error(`‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î: ${currentStep}`);
      return;
    }
  } catch (error) {
    console.error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô generateCodeAuto: ${error}`);
  }
}

function sendCodeCountUpdate() {
  const messageText = `üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

üî¥ TRUE V2: ${trueV2Count} ‡πÇ‡∏Ñ‡πâ‡∏î`;

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  for (const userId of userIds) {
    try {
      client.pushMessage(userId, {
        type: 'text',
        text: messageText,
      });
      console.log(`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
    } catch (error) {
      console.error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}: ${error}`);
    }
  }
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook endpoint
app.post('/callback', line.middleware(config), (req, res) => {
  Promise
    .all(req.body.events.map(handleEvent))
    .then((result) => res.json(result))
    .catch((error) => {
      console.error(error);
      res.status(500).end();
    });
});

async function handleEvent(event) {
  if (event.type === 'message' && event.message.type === 'text') {
    const userId = event.source.userId;
    userIds.add(userId);
    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    return client.replyMessage(event.replyToken, {
      type: 'text',
      text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢',
    });
  }
  return Promise.resolve(null);
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Scheduler
schedule.scheduleJob('0 * * * *', generateCodeAuto); // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
schedule.scheduleJob('0 0 * * *', sendCodeCountUpdate); // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô

// ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå static
app.use('/static', express.static(path.join(__dirname, 'static')));

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï ${port}`);
});
